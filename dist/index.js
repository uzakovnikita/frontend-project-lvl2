"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _fs = require("fs");

var _process = require("process");

var _path = require("path");

const plus = key => `+ ${key}`;

const minus = key => `- ${key}`;

const space = key => `  ${key}`;

const isObject = (obj, key) => Object.prototype.toString.call(obj[key]) === '[object Object]';

const convertObjectToSring = obj => {
  const keys = Object.keys(obj);
  const list = keys.reduce((acc, key) => {
    if (isObject(obj, key)) {
      return [...acc, `${space(key)}: ${convertObjectToSring(obj[key])}`];
    }

    return [...acc, `${space(key)}: ${obj[key]}`];
  }, []);
  const result = `\n${list.join('\n')} \n`;
  return result;
};

const diff = (firstData, secondData) => {
  if ((0, _lodash.isEqual)(firstData, secondData)) {
    return firstData;
  }

  let difference = {};
  const keys = Object.keys(firstData);
  const keys2 = Object.keys(secondData);
  const matchingKeys = keys.filter(key => (0, _lodash.has)(secondData, key));
  const addedKeys = keys2.filter(key2 => !(0, _lodash.has)(firstData, key2));
  const deletedKeys = keys.filter(key => !(0, _lodash.has)(secondData, key));
  matchingKeys.map(key => {
    if ((0, _lodash.isEqual)(secondData[key], firstData[key])) {
      difference[space(key)] = firstData[key];
    } else if (isObject(firstData, key)) {
      difference = { ...difference,
        [space(key)]: diff(firstData[key], secondData[key])
      };
    } else {
      difference[plus(key)] = secondData[key];
      difference[minus(key)] = firstData[key];
    }

    return true;
  });
  addedKeys.map(key => {
    difference[plus(key)] = secondData[key];
    return true;
  });
  deletedKeys.map(key => {
    difference[minus(key)] = firstData[key];
    return true;
  });
  const result = difference;
  return result;
};

var _default = (firstConfig, secondConfig) => {
  const currentDirectory = (0, _process.cwd)();
  const firstSource = (0, _path.resolve)(currentDirectory, firstConfig);
  const secondSource = (0, _path.resolve)(currentDirectory, secondConfig);
  const firstData = JSON.parse((0, _fs.readFileSync)(firstSource));
  const secondData = JSON.parse((0, _fs.readFileSync)(secondSource));
  const result = `{\n${convertObjectToSring(diff(firstData, secondData))}\n}`;
  return result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwbHVzIiwia2V5IiwibWludXMiLCJzcGFjZSIsImlzT2JqZWN0Iiwib2JqIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiY29udmVydE9iamVjdFRvU3JpbmciLCJrZXlzIiwibGlzdCIsInJlZHVjZSIsImFjYyIsInJlc3VsdCIsImpvaW4iLCJkaWZmIiwiZmlyc3REYXRhIiwic2Vjb25kRGF0YSIsImRpZmZlcmVuY2UiLCJrZXlzMiIsIm1hdGNoaW5nS2V5cyIsImZpbHRlciIsImFkZGVkS2V5cyIsImtleTIiLCJkZWxldGVkS2V5cyIsIm1hcCIsImZpcnN0Q29uZmlnIiwic2Vjb25kQ29uZmlnIiwiY3VycmVudERpcmVjdG9yeSIsImZpcnN0U291cmNlIiwic2Vjb25kU291cmNlIiwiSlNPTiIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsSUFBSSxHQUFJQyxHQUFELElBQVUsS0FBSUEsR0FBSSxFQUEvQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUlELEdBQUQsSUFBVSxLQUFJQSxHQUFJLEVBQWhDOztBQUNBLE1BQU1FLEtBQUssR0FBSUYsR0FBRCxJQUFVLEtBQUlBLEdBQUksRUFBaEM7O0FBQ0EsTUFBTUcsUUFBUSxHQUFHLENBQUNDLEdBQUQsRUFBTUosR0FBTixLQUFjSyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosR0FBRyxDQUFDSixHQUFELENBQWxDLE1BQTZDLGlCQUE1RTs7QUFFQSxNQUFNUyxvQkFBb0IsR0FBSUwsR0FBRCxJQUFTO0FBQ3BDLFFBQU1NLElBQUksR0FBR0wsTUFBTSxDQUFDSyxJQUFQLENBQVlOLEdBQVosQ0FBYjtBQUNBLFFBQU1PLElBQUksR0FBR0QsSUFBSSxDQUFDRSxNQUFMLENBQVksQ0FBQ0MsR0FBRCxFQUFNYixHQUFOLEtBQWM7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QUNELEdBQUQsQ0FBTixDQUFWLEdBQXlCaUIsU0FBUyxDQUFDakIsR0FBRCxDQUFsQztBQUNBLFdBQU8sSUFBUDtBQUNELEdBSEQ7QUFJQSxRQUFNYyxNQUFNLEdBQUdLLFVBQWY7QUFDQSxTQUFPTCxNQUFQO0FBQ0QsQ0EvQkQ7O2VBaUNlLENBQUNhLFdBQUQsRUFBY0MsWUFBZCxLQUErQjtBQUM1QyxRQUFNQyxnQkFBZ0IsR0FBRyxtQkFBekI7QUFDQSxRQUFNQyxXQUFXLEdBQUcsbUJBQVFELGdCQUFSLEVBQTBCRixXQUExQixDQUFwQjtBQUNBLFFBQU1JLFlBQVksR0FBRyxtQkFBUUYsZ0JBQVIsRUFBMEJELFlBQTFCLENBQXJCO0FBQ0EsUUFBTVgsU0FBUyxHQUFHZSxJQUFJLENBQUNDLEtBQUwsQ0FBVyxzQkFBYUgsV0FBYixDQUFYLENBQWxCO0FBQ0EsUUFBTVosVUFBVSxHQUFHYyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxzQkFBYUYsWUFBYixDQUFYLENBQW5CO0FBQ0EsUUFBTWpCLE1BQU0sR0FBSSxNQUFLTCxvQkFBb0IsQ0FBQ08sSUFBSSxDQUFDQyxTQUFELEVBQVlDLFVBQVosQ0FBTCxDQUE4QixLQUF2RTtBQUNBLFNBQU9KLE1BQVA7QUFDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzLCBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGN3ZCB9IGZyb20gJ3Byb2Nlc3MnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuXG5jb25zdCBwbHVzID0gKGtleSkgPT4gYCsgJHtrZXl9YDtcbmNvbnN0IG1pbnVzID0gKGtleSkgPT4gYC0gJHtrZXl9YDtcbmNvbnN0IHNwYWNlID0gKGtleSkgPT4gYCAgJHtrZXl9YDtcbmNvbnN0IGlzT2JqZWN0ID0gKG9iaiwga2V5KSA9PiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqW2tleV0pID09PSAnW29iamVjdCBPYmplY3RdJztcblxuY29uc3QgY29udmVydE9iamVjdFRvU3JpbmcgPSAob2JqKSA9PiB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBjb25zdCBsaXN0ID0ga2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgaWYgKGlzT2JqZWN0KG9iaiwga2V5KSkge1xuICAgICAgcmV0dXJuIFsuLi5hY2MsIGAke3NwYWNlKGtleSl9OiAkeyhjb252ZXJ0T2JqZWN0VG9TcmluZyhvYmpba2V5XSkpfWBdO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLmFjYywgYCR7c3BhY2Uoa2V5KX06ICR7KG9ialtrZXldKX1gXTtcbiAgfSwgW10pO1xuICBjb25zdCByZXN1bHQgPSBgXFxuJHtsaXN0LmpvaW4oJ1xcbicpfSBcXG5gO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3QgZGlmZiA9IChmaXJzdERhdGEsIHNlY29uZERhdGEpID0+IHtcbiAgaWYgKGlzRXF1YWwoZmlyc3REYXRhLCBzZWNvbmREYXRhKSkge1xuICAgIHJldHVybiBmaXJzdERhdGE7XG4gIH1cbiAgbGV0IGRpZmZlcmVuY2UgPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZpcnN0RGF0YSk7XG4gIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMoc2Vjb25kRGF0YSk7XG4gIGNvbnN0IG1hdGNoaW5nS2V5cyA9IGtleXMuZmlsdGVyKChrZXkpID0+IGhhcyhzZWNvbmREYXRhLCBrZXkpKTtcbiAgY29uc3QgYWRkZWRLZXlzID0ga2V5czIuZmlsdGVyKChrZXkyKSA9PiAhaGFzKGZpcnN0RGF0YSwga2V5MikpO1xuICBjb25zdCBkZWxldGVkS2V5cyA9IGtleXMuZmlsdGVyKChrZXkpID0+ICFoYXMoc2Vjb25kRGF0YSwga2V5KSk7XG4gIG1hdGNoaW5nS2V5cy5tYXAoKGtleSkgPT4ge1xuICAgIGlmIChpc0VxdWFsKHNlY29uZERhdGFba2V5XSwgZmlyc3REYXRhW2tleV0pKSB7XG4gICAgICBkaWZmZXJlbmNlW3NwYWNlKGtleSldID0gZmlyc3REYXRhW2tleV07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChmaXJzdERhdGEsIGtleSkpIHtcbiAgICAgIGRpZmZlcmVuY2UgPSB7IC4uLmRpZmZlcmVuY2UsIFtzcGFjZShrZXkpXTogZGlmZihmaXJzdERhdGFba2V5XSwgc2Vjb25kRGF0YVtrZXldKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkaWZmZXJlbmNlW3BsdXMoa2V5KV0gPSBzZWNvbmREYXRhW2tleV07XG4gICAgICBkaWZmZXJlbmNlW21pbnVzKGtleSldID0gZmlyc3REYXRhW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgYWRkZWRLZXlzLm1hcCgoa2V5KSA9PiB7XG4gICAgZGlmZmVyZW5jZVtwbHVzKGtleSldID0gc2Vjb25kRGF0YVtrZXldO1xuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgZGVsZXRlZEtleXMubWFwKChrZXkpID0+IHtcbiAgICBkaWZmZXJlbmNlW21pbnVzKGtleSldID0gZmlyc3REYXRhW2tleV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuICBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZpcnN0Q29uZmlnLCBzZWNvbmRDb25maWcpID0+IHtcbiAgY29uc3QgY3VycmVudERpcmVjdG9yeSA9IGN3ZCgpO1xuICBjb25zdCBmaXJzdFNvdXJjZSA9IHJlc29sdmUoY3VycmVudERpcmVjdG9yeSwgZmlyc3RDb25maWcpO1xuICBjb25zdCBzZWNvbmRTb3VyY2UgPSByZXNvbHZlKGN1cnJlbnREaXJlY3RvcnksIHNlY29uZENvbmZpZyk7XG4gIGNvbnN0IGZpcnN0RGF0YSA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGZpcnN0U291cmNlKSk7XG4gIGNvbnN0IHNlY29uZERhdGEgPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhzZWNvbmRTb3VyY2UpKTtcbiAgY29uc3QgcmVzdWx0ID0gYHtcXG4ke2NvbnZlcnRPYmplY3RUb1NyaW5nKGRpZmYoZmlyc3REYXRhLCBzZWNvbmREYXRhKSl9XFxufWA7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl19