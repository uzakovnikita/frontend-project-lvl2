"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _fs = require("fs");

var _process = require("process");

var _path = require("path");

const plus = key => `  + ${key}`;

const minus = key => `  - ${key}`;

const space = key => `    ${key}`;

const isObject = (obj, key) => Object.prototype.toString.call(obj[key]) === '[object Object]'; // const convertObjectToSring = (obj) => {
//     const keys = Object.keys(obj);
//     const list = keys.reduce((acc, key) => {
//         if (isObject(obj, key)) {
//             acc = [...acc, space(convertObjectToSring(obj[key]))];
//             return acc;
//         }
//         return acc = [...acc, `${key}: ${obj[key]}`];
//     }, []);
//     const result = `{\n${list.join('\n')} \n}`;
//     return result;
// }


const diff = (firstData, secondData) => {
  if ((0, _lodash.isEqual)(firstData, secondData)) {
    return firstData;
  }

  let difference = {};
  const keys = Object.keys(firstData);
  const keys2 = Object.keys(secondData);
  const matchingKeys = keys.filter(key => (0, _lodash.has)(secondData, key));
  const addedKeys = keys2.filter(key2 => !(0, _lodash.has)(firstData, key2));
  const deletedKeys = keys.filter(key => !(0, _lodash.has)(secondData, key));
  matchingKeys.map(key => {
    if ((0, _lodash.isEqual)(secondData[key], firstData[key])) {
      difference[space(key)] = firstData[key];
    } else if (isObject(firstData, key)) {
      difference = { ...difference,
        [space(key)]: diff(firstData[key], secondData[key])
      };
    } else {
      difference[plus(key)] = secondData[key];
      difference[minus(key)] = firstData[key];
    }
  });
  addedKeys.map(key => difference[plus(key)] = secondData[key]);
  deletedKeys.map(key => difference[minus(key)] = firstData[key]);
  const result = difference;
  return result;
};

var _default = (firstConfig, secondConfig) => {
  const currentDirectory = (0, _process.cwd)();
  const firstSource = (0, _path.resolve)(currentDirectory, firstConfig);
  const secondSource = (0, _path.resolve)(currentDirectory, secondConfig);
  const firstData = JSON.parse((0, _fs.readFileSync)(firstSource));
  const secondData = JSON.parse((0, _fs.readFileSync)(secondSource));
  const result = diff(firstData, secondData);
  return result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwbHVzIiwia2V5IiwibWludXMiLCJzcGFjZSIsImlzT2JqZWN0Iiwib2JqIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZGlmZiIsImZpcnN0RGF0YSIsInNlY29uZERhdGEiLCJkaWZmZXJlbmNlIiwia2V5cyIsImtleXMyIiwibWF0Y2hpbmdLZXlzIiwiZmlsdGVyIiwiYWRkZWRLZXlzIiwia2V5MiIsImRlbGV0ZWRLZXlzIiwibWFwIiwicmVzdWx0IiwiZmlyc3RDb25maWciLCJzZWNvbmRDb25maWciLCJjdXJyZW50RGlyZWN0b3J5IiwiZmlyc3RTb3VyY2UiLCJzZWNvbmRTb3VyY2UiLCJKU09OIiwicGFyc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxJQUFJLEdBQUlDLEdBQUQsSUFBVSxPQUFNQSxHQUFJLEVBQWpDOztBQUNBLE1BQU1DLEtBQUssR0FBSUQsR0FBRCxJQUFVLE9BQU1BLEdBQUksRUFBbEM7O0FBQ0EsTUFBTUUsS0FBSyxHQUFJRixHQUFELElBQVUsT0FBTUEsR0FBSSxFQUFsQzs7QUFDQSxNQUFNRyxRQUFRLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNSixHQUFOLEtBQWVLLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixHQUFHLENBQUNKLEdBQUQsQ0FBbEMsTUFBNkMsaUJBQTdFLEMsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLE1BQU1TLElBQUksR0FBRyxDQUFDQyxTQUFELEVBQVlDLFVBQVosS0FBMkI7QUFDcEMsTUFBSSxxQkFBUUQsU0FBUixFQUFtQkMsVUFBbkIsQ0FBSixFQUFvQztBQUNsQyxXQUFPRCxTQUFQO0FBQ0Q7O0FBQ0QsTUFBSUUsVUFBVSxHQUFHLEVBQWpCO0FBQ0EsUUFBTUMsSUFBSSxHQUFHUixNQUFNLENBQUNRLElBQVAsQ0FBWUgsU0FBWixDQUFiO0FBQ0EsUUFBTUksS0FBSyxHQUFHVCxNQUFNLENBQUNRLElBQVAsQ0FBWUYsVUFBWixDQUFkO0FBQ0EsUUFBTUksWUFBWSxHQUFHRixJQUFJLENBQUNHLE1BQUwsQ0FBYWhCLEdBQUQsSUFBUSxpQkFBSVcsVUFBSixFQUFnQlgsR0FBaEIsQ0FBcEIsQ0FBckI7QUFDQSxRQUFNaUIsU0FBUyxHQUFHSCxLQUFLLENBQUNFLE1BQU4sQ0FBY0UsSUFBRCxJQUFVLENBQUMsaUJBQUlSLFNBQUosRUFBZVEsSUFBZixDQUF4QixDQUFsQjtBQUNBLFFBQU1DLFdBQVcsR0FBR04sSUFBSSxDQUFDRyxNQUFMLENBQWFoQixHQUFELElBQVMsQ0FBQyxpQkFBSVcsVUFBSixFQUFnQlgsR0FBaEIsQ0FBdEIsQ0FBcEI7QUFDQWUsRUFBQUEsWUFBWSxDQUFDSyxHQUFiLENBQWtCcEIsR0FBRCxJQUFTO0FBQ3RCLFFBQUkscUJBQVFXLFVBQVUsQ0FBQ1gsR0FBRCxDQUFsQixFQUF5QlUsU0FBUyxDQUFDVixHQUFELENBQWxDLENBQUosRUFBOEM7QUFDMUNZLE1BQUFBLFVBQVUsQ0FBQ1YsS0FBSyxDQUFDRixHQUFELENBQU4sQ0FBVixHQUF5QlUsU0FBUyxDQUFDVixHQUFELENBQWxDO0FBQ0gsS0FGRCxNQUVPLElBQUlHLFFBQVEsQ0FBQ08sU0FBRCxFQUFZVixHQUFaLENBQVosRUFBOEI7QUFDakNZLE1BQUFBLFVBQVUsR0FBRyxFQUFDLEdBQUdBLFVBQUo7QUFBZ0IsU0FBQ1YsS0FBSyxDQUFDRixHQUFELENBQU4sR0FBY1MsSUFBSSxDQUFDQyxTQUFTLENBQUNWLEdBQUQsQ0FBVixFQUFpQlcsVUFBVSxDQUFDWCxHQUFELENBQTNCO0FBQWxDLE9BQWI7QUFDSCxLQUZNLE1BRUE7QUFDSFksTUFBQUEsVUFBVSxDQUFDYixJQUFJLENBQUNDLEdBQUQsQ0FBTCxDQUFWLEdBQXdCVyxVQUFVLENBQUNYLEdBQUQsQ0FBbEM7QUFDQVksTUFBQUEsVUFBVSxDQUFDWCxLQUFLLENBQUNELEdBQUQsQ0FBTixDQUFWLEdBQXlCVSxTQUFTLENBQUNWLEdBQUQsQ0FBbEM7QUFDSDtBQUNKLEdBVEQ7QUFVQWlCLEVBQUFBLFNBQVMsQ0FBQ0csR0FBVixDQUFlcEIsR0FBRCxJQUFRWSxVQUFVLENBQUNiLElBQUksQ0FBQ0MsR0FBRCxDQUFMLENBQVYsR0FBd0JXLFVBQVUsQ0FBQ1gsR0FBRCxDQUF4RDtBQUNBbUIsRUFBQUEsV0FBVyxDQUFDQyxHQUFaLENBQWlCcEIsR0FBRCxJQUFTWSxVQUFVLENBQUNYLEtBQUssQ0FBQ0QsR0FBRCxDQUFOLENBQVYsR0FBeUJVLFNBQVMsQ0FBQ1YsR0FBRCxDQUEzRDtBQUNBLFFBQU1xQixNQUFNLEdBQUdULFVBQWY7QUFDQSxTQUFPUyxNQUFQO0FBQ0gsQ0F4QkQ7O2VBMEJlLENBQUNDLFdBQUQsRUFBY0MsWUFBZCxLQUErQjtBQUMxQyxRQUFNQyxnQkFBZ0IsR0FBRyxtQkFBekI7QUFDQSxRQUFNQyxXQUFXLEdBQUcsbUJBQVFELGdCQUFSLEVBQTBCRixXQUExQixDQUFwQjtBQUNBLFFBQU1JLFlBQVksR0FBRyxtQkFBUUYsZ0JBQVIsRUFBMEJELFlBQTFCLENBQXJCO0FBQ0EsUUFBTWIsU0FBUyxHQUFHaUIsSUFBSSxDQUFDQyxLQUFMLENBQVcsc0JBQWFILFdBQWIsQ0FBWCxDQUFsQjtBQUNBLFFBQU1kLFVBQVUsR0FBR2dCLElBQUksQ0FBQ0MsS0FBTCxDQUFXLHNCQUFhRixZQUFiLENBQVgsQ0FBbkI7QUFDQSxRQUFNTCxNQUFNLEdBQUdaLElBQUksQ0FBQ0MsU0FBRCxFQUFZQyxVQUFaLENBQW5CO0FBQ0EsU0FBT1UsTUFBUDtBQUNILEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXMsIGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gIGZyb20gJ2ZzJztcbmltcG9ydCB7IGN3ZCB9IGZyb20gJ3Byb2Nlc3MnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuXG5jb25zdCBwbHVzID0gKGtleSkgPT4gYCAgKyAke2tleX1gO1xuY29uc3QgbWludXMgPSAoa2V5KSA9PiBgICAtICR7a2V5fWA7XG5jb25zdCBzcGFjZSA9IChrZXkpID0+IGAgICAgJHtrZXl9YDtcbmNvbnN0IGlzT2JqZWN0ID0gKG9iaiwga2V5KSA9PiAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9ialtrZXldKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8vIGNvbnN0IGNvbnZlcnRPYmplY3RUb1NyaW5nID0gKG9iaikgPT4ge1xuLy8gICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuLy8gICAgIGNvbnN0IGxpc3QgPSBrZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbi8vICAgICAgICAgaWYgKGlzT2JqZWN0KG9iaiwga2V5KSkge1xuLy8gICAgICAgICAgICAgYWNjID0gWy4uLmFjYywgc3BhY2UoY29udmVydE9iamVjdFRvU3Jpbmcob2JqW2tleV0pKV07XG4vLyAgICAgICAgICAgICByZXR1cm4gYWNjO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIHJldHVybiBhY2MgPSBbLi4uYWNjLCBgJHtrZXl9OiAke29ialtrZXldfWBdO1xuLy8gICAgIH0sIFtdKTtcbi8vICAgICBjb25zdCByZXN1bHQgPSBge1xcbiR7bGlzdC5qb2luKCdcXG4nKX0gXFxufWA7XG4vLyAgICAgcmV0dXJuIHJlc3VsdDtcbi8vIH1cblxuY29uc3QgZGlmZiA9IChmaXJzdERhdGEsIHNlY29uZERhdGEpID0+IHtcbiAgICBpZiAoaXNFcXVhbChmaXJzdERhdGEsIHNlY29uZERhdGEpKSB7XG4gICAgICByZXR1cm4gZmlyc3REYXRhO1xuICAgIH1cbiAgICBsZXQgZGlmZmVyZW5jZSA9IHt9O1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmaXJzdERhdGEpO1xuICAgIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMoc2Vjb25kRGF0YSk7XG4gICAgY29uc3QgbWF0Y2hpbmdLZXlzID0ga2V5cy5maWx0ZXIoKGtleSk9PiBoYXMoc2Vjb25kRGF0YSwga2V5KSk7XG4gICAgY29uc3QgYWRkZWRLZXlzID0ga2V5czIuZmlsdGVyKChrZXkyKSA9PiAhaGFzKGZpcnN0RGF0YSwga2V5MikpO1xuICAgIGNvbnN0IGRlbGV0ZWRLZXlzID0ga2V5cy5maWx0ZXIoKGtleSkgPT4gIWhhcyhzZWNvbmREYXRhLCBrZXkpKTtcbiAgICBtYXRjaGluZ0tleXMubWFwKChrZXkpID0+IHtcbiAgICAgICAgaWYgKGlzRXF1YWwoc2Vjb25kRGF0YVtrZXldLCBmaXJzdERhdGFba2V5XSkpIHtcbiAgICAgICAgICAgIGRpZmZlcmVuY2Vbc3BhY2Uoa2V5KV0gPSBmaXJzdERhdGFba2V5XTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChmaXJzdERhdGEsIGtleSkpIHtcbiAgICAgICAgICAgIGRpZmZlcmVuY2UgPSB7Li4uZGlmZmVyZW5jZSwgW3NwYWNlKGtleSldOiBkaWZmKGZpcnN0RGF0YVtrZXldLCBzZWNvbmREYXRhW2tleV0pfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpZmZlcmVuY2VbcGx1cyhrZXkpXSA9IHNlY29uZERhdGFba2V5XTtcbiAgICAgICAgICAgIGRpZmZlcmVuY2VbbWludXMoa2V5KV0gPSBmaXJzdERhdGFba2V5XTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgYWRkZWRLZXlzLm1hcCgoa2V5KT0+IGRpZmZlcmVuY2VbcGx1cyhrZXkpXSA9IHNlY29uZERhdGFba2V5XSk7XG4gICAgZGVsZXRlZEtleXMubWFwKChrZXkpID0+IGRpZmZlcmVuY2VbbWludXMoa2V5KV0gPSBmaXJzdERhdGFba2V5XSk7XG4gICAgY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCAoZmlyc3RDb25maWcsIHNlY29uZENvbmZpZykgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3RvcnkgPSBjd2QoKTtcbiAgICBjb25zdCBmaXJzdFNvdXJjZSA9IHJlc29sdmUoY3VycmVudERpcmVjdG9yeSwgZmlyc3RDb25maWcpO1xuICAgIGNvbnN0IHNlY29uZFNvdXJjZSA9IHJlc29sdmUoY3VycmVudERpcmVjdG9yeSwgc2Vjb25kQ29uZmlnKTtcbiAgICBjb25zdCBmaXJzdERhdGEgPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhmaXJzdFNvdXJjZSkpXG4gICAgY29uc3Qgc2Vjb25kRGF0YSA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHNlY29uZFNvdXJjZSkpXG4gICAgY29uc3QgcmVzdWx0ID0gZGlmZihmaXJzdERhdGEsIHNlY29uZERhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbiJdfQ==