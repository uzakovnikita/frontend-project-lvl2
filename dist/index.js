"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _fs = require("fs");

var _process = require("process");

var _path = require("path");

const plus = key => `+ ${key}`;

const minus = key => `- ${key}`;

var _default = (firstConfig, secondConfig) => {
  const currentDirectory = (0, _process.cwd)();
  const firstSource = (0, _path.resolve)(currentDirectory, firstConfig);
  const secondSource = (0, _path.resolve)(currentDirectory, secondConfig);
  const result = {};
  const firstData = JSON.parse((0, _fs.readFileSync)(firstSource));
  const secondData = JSON.parse((0, _fs.readFileSync)(secondSource));

  if ((0, _lodash.isEqual)(firstData, secondData)) {
    return firstData;
  }

  const keys = Object.keys(firstData);
  const matchingKeys = keys.filter(key => (0, _lodash.has)(secondData, key));
  const missmathcingKeys = keys.filter(key => !(0, _lodash.has)(secondData, key));
  matchingKeys.map(key => {
    if ((0, _lodash.isEqual)(secondData[key], firstData[key])) {
      result[key] = firstData[key];
    } else {
      result[plus(key)] = secondData[key];
      result[minus(key)] = firstData[key];
    }
  });
  missmathcingKeys.map(key => result[minus(key)] = firstData[key]);
  return result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwbHVzIiwia2V5IiwibWludXMiLCJmaXJzdENvbmZpZyIsInNlY29uZENvbmZpZyIsImN1cnJlbnREaXJlY3RvcnkiLCJmaXJzdFNvdXJjZSIsInNlY29uZFNvdXJjZSIsInJlc3VsdCIsImZpcnN0RGF0YSIsIkpTT04iLCJwYXJzZSIsInNlY29uZERhdGEiLCJrZXlzIiwiT2JqZWN0IiwibWF0Y2hpbmdLZXlzIiwiZmlsdGVyIiwibWlzc21hdGhjaW5nS2V5cyIsIm1hcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBLE1BQU1BLElBQUksR0FBSUMsR0FBRCxJQUFVLEtBQUlBLEdBQUksRUFBL0I7O0FBQ0EsTUFBTUMsS0FBSyxHQUFJRCxHQUFELElBQVUsS0FBSUEsR0FBSSxFQUFoQzs7ZUFFZSxDQUFDRSxXQUFELEVBQWNDLFlBQWQsS0FBK0I7QUFDMUMsUUFBTUMsZ0JBQWdCLEdBQUcsbUJBQXpCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHLG1CQUFRRCxnQkFBUixFQUEwQkYsV0FBMUIsQ0FBcEI7QUFDQSxRQUFNSSxZQUFZLEdBQUcsbUJBQVFGLGdCQUFSLEVBQTBCRCxZQUExQixDQUFyQjtBQUNBLFFBQU1JLE1BQU0sR0FBRyxFQUFmO0FBQ0EsUUFBTUMsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxzQkFBYUwsV0FBYixDQUFYLENBQWxCO0FBQ0EsUUFBTU0sVUFBVSxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBVyxzQkFBYUosWUFBYixDQUFYLENBQW5COztBQUNBLE1BQUkscUJBQVFFLFNBQVIsRUFBbUJHLFVBQW5CLENBQUosRUFBb0M7QUFDaEMsV0FBT0gsU0FBUDtBQUNIOztBQUNELFFBQU1JLElBQUksR0FBR0MsTUFBTSxDQUFDRCxJQUFQLENBQVlKLFNBQVosQ0FBYjtBQUNBLFFBQU1NLFlBQVksR0FBR0YsSUFBSSxDQUFDRyxNQUFMLENBQWFmLEdBQUQsSUFBUSxpQkFBSVcsVUFBSixFQUFnQlgsR0FBaEIsQ0FBcEIsQ0FBckI7QUFDQSxRQUFNZ0IsZ0JBQWdCLEdBQUdKLElBQUksQ0FBQ0csTUFBTCxDQUFhZixHQUFELElBQVMsQ0FBQyxpQkFBSVcsVUFBSixFQUFnQlgsR0FBaEIsQ0FBdEIsQ0FBekI7QUFDQWMsRUFBQUEsWUFBWSxDQUFDRyxHQUFiLENBQWtCakIsR0FBRCxJQUFTO0FBQ3RCLFFBQUkscUJBQVFXLFVBQVUsQ0FBQ1gsR0FBRCxDQUFsQixFQUF5QlEsU0FBUyxDQUFDUixHQUFELENBQWxDLENBQUosRUFBOEM7QUFDMUNPLE1BQUFBLE1BQU0sQ0FBQ1AsR0FBRCxDQUFOLEdBQWNRLFNBQVMsQ0FBQ1IsR0FBRCxDQUF2QjtBQUNILEtBRkQsTUFFTztBQUNITyxNQUFBQSxNQUFNLENBQUNSLElBQUksQ0FBQ0MsR0FBRCxDQUFMLENBQU4sR0FBb0JXLFVBQVUsQ0FBQ1gsR0FBRCxDQUE5QjtBQUNBTyxNQUFBQSxNQUFNLENBQUNOLEtBQUssQ0FBQ0QsR0FBRCxDQUFOLENBQU4sR0FBcUJRLFNBQVMsQ0FBQ1IsR0FBRCxDQUE5QjtBQUNIO0FBQ0osR0FQRDtBQVFBZ0IsRUFBQUEsZ0JBQWdCLENBQUNDLEdBQWpCLENBQXNCakIsR0FBRCxJQUFTTyxNQUFNLENBQUNOLEtBQUssQ0FBQ0QsR0FBRCxDQUFOLENBQU4sR0FBcUJRLFNBQVMsQ0FBQ1IsR0FBRCxDQUE1RDtBQUNBLFNBQU9PLE1BQVA7QUFDSCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzLCBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9ICBmcm9tICdmcyc7XG5pbXBvcnQgeyBjd2QgfSBmcm9tICdwcm9jZXNzJztcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJztcbmNvbnN0IHBsdXMgPSAoa2V5KSA9PiBgKyAke2tleX1gO1xuY29uc3QgbWludXMgPSAoa2V5KSA9PiBgLSAke2tleX1gO1xuXG5leHBvcnQgZGVmYXVsdCAoZmlyc3RDb25maWcsIHNlY29uZENvbmZpZykgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3RvcnkgPSBjd2QoKTtcbiAgICBjb25zdCBmaXJzdFNvdXJjZSA9IHJlc29sdmUoY3VycmVudERpcmVjdG9yeSwgZmlyc3RDb25maWcpO1xuICAgIGNvbnN0IHNlY29uZFNvdXJjZSA9IHJlc29sdmUoY3VycmVudERpcmVjdG9yeSwgc2Vjb25kQ29uZmlnKTtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBjb25zdCBmaXJzdERhdGEgPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhmaXJzdFNvdXJjZSkpXG4gICAgY29uc3Qgc2Vjb25kRGF0YSA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHNlY29uZFNvdXJjZSkpXG4gICAgaWYgKGlzRXF1YWwoZmlyc3REYXRhLCBzZWNvbmREYXRhKSkge1xuICAgICAgICByZXR1cm4gZmlyc3REYXRhO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmlyc3REYXRhKTtcbiAgICBjb25zdCBtYXRjaGluZ0tleXMgPSBrZXlzLmZpbHRlcigoa2V5KT0+IGhhcyhzZWNvbmREYXRhLCBrZXkpKTtcbiAgICBjb25zdCBtaXNzbWF0aGNpbmdLZXlzID0ga2V5cy5maWx0ZXIoKGtleSkgPT4gIWhhcyhzZWNvbmREYXRhLCBrZXkpKTtcbiAgICBtYXRjaGluZ0tleXMubWFwKChrZXkpID0+IHtcbiAgICAgICAgaWYgKGlzRXF1YWwoc2Vjb25kRGF0YVtrZXldLCBmaXJzdERhdGFba2V5XSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gZmlyc3REYXRhW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRbcGx1cyhrZXkpXSA9IHNlY29uZERhdGFba2V5XTtcbiAgICAgICAgICAgIHJlc3VsdFttaW51cyhrZXkpXSA9IGZpcnN0RGF0YVtrZXldO1xuICAgICAgICB9XG4gICAgfSlcbiAgICBtaXNzbWF0aGNpbmdLZXlzLm1hcCgoa2V5KSA9PiByZXN1bHRbbWludXMoa2V5KV0gPSBmaXJzdERhdGFba2V5XSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuIl19