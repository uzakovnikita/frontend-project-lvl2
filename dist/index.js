"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _fs = require("fs");

var _process = require("process");

var _path = require("path");

const plus = key => `+ ${key}`;

const minus = key => `- ${key}`;

const space = key => `  ${key}`;

const isObject = (obj, key) => Object.prototype.toString.call(obj[key]) === '[object Object]';

const convertObjectToSring = obj => {
  const keys = Object.keys(obj);
  const list = keys.reduce((acc, key) => {
    if (isObject(obj, key)) {
      acc = [...acc, `${space(key)}: ${convertObjectToSring(obj[key])}`];
      return acc;
    }

    return acc = [...acc, `${space(key)}: ${obj[key]}`];
  }, []);
  const result = `\n${list.join('\n')} \n`;
  return result;
};

const diff = (firstData, secondData) => {
  if ((0, _lodash.isEqual)(firstData, secondData)) {
    return firstData;
  }

  let difference = {};
  const keys = Object.keys(firstData);
  const keys2 = Object.keys(secondData);
  const matchingKeys = keys.filter(key => (0, _lodash.has)(secondData, key));
  const addedKeys = keys2.filter(key2 => !(0, _lodash.has)(firstData, key2));
  const deletedKeys = keys.filter(key => !(0, _lodash.has)(secondData, key));
  matchingKeys.map(key => {
    if ((0, _lodash.isEqual)(secondData[key], firstData[key])) {
      difference[space(key)] = firstData[key];
    } else if (isObject(firstData, key)) {
      difference = { ...difference,
        [space(key)]: diff(firstData[key], secondData[key])
      };
    } else {
      difference[plus(key)] = secondData[key];
      difference[minus(key)] = firstData[key];
    }
  });
  addedKeys.map(key => difference[plus(key)] = secondData[key]);
  deletedKeys.map(key => difference[minus(key)] = firstData[key]);
  const result = difference;
  return result;
};

var _default = (firstConfig, secondConfig) => {
  const currentDirectory = (0, _process.cwd)();
  const firstSource = (0, _path.resolve)(currentDirectory, firstConfig);
  const secondSource = (0, _path.resolve)(currentDirectory, secondConfig);
  const firstData = JSON.parse((0, _fs.readFileSync)(firstSource));
  const secondData = JSON.parse((0, _fs.readFileSync)(secondSource));
  const result = `{\n${convertObjectToSring(diff(firstData, secondData))}\n}`;
  return result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwbHVzIiwia2V5IiwibWludXMiLCJzcGFjZSIsImlzT2JqZWN0Iiwib2JqIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiY29udmVydE9iamVjdFRvU3JpbmciLCJrZXlzIiwibGlzdCIsInJlZHVjZSIsImFjYyIsInJlc3VsdCIsImpvaW4iLCJkaWZmIiwiZmlyc3REYXRhIiwic2Vjb25kRGF0YSIsImRpZmZlcmVuY2UiLCJrZXlzMiIsIm1hdGNoaW5nS2V5cyIsImZpbHRlciIsImFkZGVkS2V5cyIsImtleTIiLCJkZWxldGVkS2V5cyIsIm1hcCIsImZpcnN0Q29uZmlnIiwic2Vjb25kQ29uZmlnIiwiY3VycmVudERpcmVjdG9yeSIsImZpcnN0U291cmNlIiwic2Vjb25kU291cmNlIiwiSlNPTiIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsSUFBSSxHQUFJQyxHQUFELElBQVUsS0FBSUEsR0FBSSxFQUEvQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUlELEdBQUQsSUFBVSxLQUFJQSxHQUFJLEVBQWhDOztBQUNBLE1BQU1FLEtBQUssR0FBSUYsR0FBRCxJQUFVLEtBQUlBLEdBQUksRUFBaEM7O0FBQ0EsTUFBTUcsUUFBUSxHQUFHLENBQUNDLEdBQUQsRUFBTUosR0FBTixLQUFlSyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosR0FBRyxDQUFDSixHQUFELENBQWxDLE1BQTZDLGlCQUE3RTs7QUFFQSxNQUFNUyxvQkFBb0IsR0FBSUwsR0FBRCxJQUFTO0FBQ2xDLFFBQU1NLElBQUksR0FBR0wsTUFBTSxDQUFDSyxJQUFQLENBQVlOLEdBQVosQ0FBYjtBQUNBLFFBQU1PLElBQUksR0FBR0QsSUFBSSxDQUFDRSxNQUFMLENBQVksQ0FBQ0MsR0FBRCxFQUFNYixHQUFOLEtBQWM7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LFNBQVMsQ0FBQ2pCLEdBQUQsQ0FBM0Q7QUFDQSxRQUFNYyxNQUFNLEdBQUdLLFVBQWY7QUFDQSxTQUFPTCxNQUFQO0FBQ0gsQ0F4QkQ7O2VBMEJlLENBQUNhLFdBQUQsRUFBY0MsWUFBZCxLQUErQjtBQUMxQyxRQUFNQyxnQkFBZ0IsR0FBRyxtQkFBekI7QUFDQSxRQUFNQyxXQUFXLEdBQUcsbUJBQVFELGdCQUFSLEVBQTBCRixXQUExQixDQUFwQjtBQUNBLFFBQU1JLFlBQVksR0FBRyxtQkFBUUYsZ0JBQVIsRUFBMEJELFlBQTFCLENBQXJCO0FBQ0EsUUFBTVgsU0FBUyxHQUFHZSxJQUFJLENBQUNDLEtBQUwsQ0FBVyxzQkFBYUgsV0FBYixDQUFYLENBQWxCO0FBQ0EsUUFBTVosVUFBVSxHQUFHYyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxzQkFBYUYsWUFBYixDQUFYLENBQW5CO0FBQ0EsUUFBTWpCLE1BQU0sR0FBSSxNQUFLTCxvQkFBb0IsQ0FBQ08sSUFBSSxDQUFDQyxTQUFELEVBQVlDLFVBQVosQ0FBTCxDQUE4QixLQUF2RTtBQUNBLFNBQU9KLE1BQVA7QUFDSCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzLCBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9ICBmcm9tICdmcyc7XG5pbXBvcnQgeyBjd2QgfSBmcm9tICdwcm9jZXNzJztcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJztcblxuY29uc3QgcGx1cyA9IChrZXkpID0+IGArICR7a2V5fWA7XG5jb25zdCBtaW51cyA9IChrZXkpID0+IGAtICR7a2V5fWA7XG5jb25zdCBzcGFjZSA9IChrZXkpID0+IGAgICR7a2V5fWA7XG5jb25zdCBpc09iamVjdCA9IChvYmosIGtleSkgPT4gIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpba2V5XSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5jb25zdCBjb252ZXJ0T2JqZWN0VG9TcmluZyA9IChvYmopID0+IHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsaXN0ID0ga2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGlmIChpc09iamVjdChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIGFjYyA9IFsuLi5hY2MsIGAke3NwYWNlKGtleSl9OiAkeyhjb252ZXJ0T2JqZWN0VG9TcmluZyhvYmpba2V5XSkpfWBdO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjID0gWy4uLmFjYywgYCR7c3BhY2Uoa2V5KX06ICR7KG9ialtrZXldKX1gXTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYFxcbiR7bGlzdC5qb2luKCdcXG4nKX0gXFxuYDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBkaWZmID0gKGZpcnN0RGF0YSwgc2Vjb25kRGF0YSkgPT4ge1xuICAgIGlmIChpc0VxdWFsKGZpcnN0RGF0YSwgc2Vjb25kRGF0YSkpIHtcbiAgICAgIHJldHVybiBmaXJzdERhdGE7XG4gICAgfVxuICAgIGxldCBkaWZmZXJlbmNlID0ge307XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZpcnN0RGF0YSk7XG4gICAgY29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyhzZWNvbmREYXRhKTtcbiAgICBjb25zdCBtYXRjaGluZ0tleXMgPSBrZXlzLmZpbHRlcigoa2V5KT0+IGhhcyhzZWNvbmREYXRhLCBrZXkpKTtcbiAgICBjb25zdCBhZGRlZEtleXMgPSBrZXlzMi5maWx0ZXIoKGtleTIpID0+ICFoYXMoZmlyc3REYXRhLCBrZXkyKSk7XG4gICAgY29uc3QgZGVsZXRlZEtleXMgPSBrZXlzLmZpbHRlcigoa2V5KSA9PiAhaGFzKHNlY29uZERhdGEsIGtleSkpO1xuICAgIG1hdGNoaW5nS2V5cy5tYXAoKGtleSkgPT4ge1xuICAgICAgICBpZiAoaXNFcXVhbChzZWNvbmREYXRhW2tleV0sIGZpcnN0RGF0YVtrZXldKSkge1xuICAgICAgICAgICAgZGlmZmVyZW5jZVtzcGFjZShrZXkpXSA9IGZpcnN0RGF0YVtrZXldO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpcnN0RGF0YSwga2V5KSkge1xuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IHsuLi5kaWZmZXJlbmNlLCBbc3BhY2Uoa2V5KV06IGRpZmYoZmlyc3REYXRhW2tleV0sIHNlY29uZERhdGFba2V5XSl9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZmVyZW5jZVtwbHVzKGtleSldID0gc2Vjb25kRGF0YVtrZXldO1xuICAgICAgICAgICAgZGlmZmVyZW5jZVttaW51cyhrZXkpXSA9IGZpcnN0RGF0YVtrZXldO1xuICAgICAgICB9XG4gICAgfSlcbiAgICBhZGRlZEtleXMubWFwKChrZXkpPT4gZGlmZmVyZW5jZVtwbHVzKGtleSldID0gc2Vjb25kRGF0YVtrZXldKTtcbiAgICBkZWxldGVkS2V5cy5tYXAoKGtleSkgPT4gZGlmZmVyZW5jZVttaW51cyhrZXkpXSA9IGZpcnN0RGF0YVtrZXldKTtcbiAgICBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChmaXJzdENvbmZpZywgc2Vjb25kQ29uZmlnKSA9PiB7XG4gICAgY29uc3QgY3VycmVudERpcmVjdG9yeSA9IGN3ZCgpO1xuICAgIGNvbnN0IGZpcnN0U291cmNlID0gcmVzb2x2ZShjdXJyZW50RGlyZWN0b3J5LCBmaXJzdENvbmZpZyk7XG4gICAgY29uc3Qgc2Vjb25kU291cmNlID0gcmVzb2x2ZShjdXJyZW50RGlyZWN0b3J5LCBzZWNvbmRDb25maWcpO1xuICAgIGNvbnN0IGZpcnN0RGF0YSA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGZpcnN0U291cmNlKSlcbiAgICBjb25zdCBzZWNvbmREYXRhID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoc2Vjb25kU291cmNlKSlcbiAgICBjb25zdCByZXN1bHQgPSBge1xcbiR7Y29udmVydE9iamVjdFRvU3JpbmcoZGlmZihmaXJzdERhdGEsIHNlY29uZERhdGEpKX1cXG59YDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4iXX0=